<?xml version="1.0" encoding="UTF-8"?>
<button backcol="none" display="both" label_pos="right" textcol="none">
	<label>花密</label>
	<tip>-- 不一样的密码管理工具</tip>
	<icon1>#FlowerPassword:FlowerPassword</icon1>
	<function type="script">
		<instruction>@script VBScript</instruction>
		<instruction>Option Explicit</instruction>
		<instruction />
		<instruction>Const BITS_TO_A_BYTE  = 8</instruction>
		<instruction>Const BYTES_TO_A_WORD = 4</instruction>
		<instruction>Const BITS_TO_A_WORD  = 32</instruction>
		<instruction />
		<instruction>&apos;Dim m_lOnBits(30), m_l2Power(30)</instruction>
		<instruction>Dim m_lOnBits, m_l2Power</instruction>
		<instruction />
		<instruction>m_lOnBits = Array(&amp;H1&amp;, &amp;H3&amp;, &amp;H7&amp;, &amp;HF&amp;, &amp;H1F&amp;, &amp;H3F&amp;, &amp;H7F&amp;, &amp;HFF&amp;, &amp;H1FF&amp;, &amp;H3FF&amp;, &amp;H7FF&amp;, &amp;HFFF&amp;, &amp;H1FFF&amp;, &amp;H3FFF&amp;, &amp;H7FFF&amp;, &amp;HFFFF&amp;, &amp;H1FFFF&amp;, &amp;H3FFFF&amp;, &amp;H7FFFF&amp;, &amp;HFFFFF&amp;, &amp;H1FFFFF&amp;, &amp;H3FFFFF&amp;, &amp;H7FFFFF&amp;, &amp;HFFFFFF&amp;, &amp;H1FFFFFF&amp;, &amp;H3FFFFFF&amp;, &amp;H7FFFFFF&amp;, &amp;HFFFFFFF&amp;, &amp;H1FFFFFFF&amp;, &amp;H3FFFFFFF&amp;, &amp;H7FFFFFFF&amp;)</instruction>
		<instruction>m_l2Power = Array(&amp;H1&amp;, &amp;H2&amp;, &amp;H4&amp;, &amp;H8&amp;, &amp;H10&amp;, &amp;H20&amp;, &amp;H40&amp;, &amp;H80&amp;, &amp;H100&amp;, &amp;H200&amp;, &amp;H400&amp;, &amp;H800&amp;, &amp;H1000&amp;, &amp;H2000&amp;, &amp;H4000&amp;, &amp;H8000&amp;, &amp;H10000&amp;, &amp;H20000&amp;, &amp;H40000&amp;, &amp;H80000&amp;, &amp;H100000&amp;, &amp;H200000&amp;, &amp;H400000&amp;, &amp;H800000&amp;, &amp;H1000000&amp;, &amp;H2000000&amp;, &amp;H4000000&amp;, &amp;H8000000&amp;, &amp;H10000000&amp;, &amp;H20000000&amp;, &amp;H40000000&amp;)</instruction>
		<instruction />
		<instruction>&apos;</instruction>
		<instruction>&apos; The main HMAC function</instruction>
		<instruction>&apos;</instruction>
		<instruction>Function HMAC(key, text)</instruction>
		<instruction>    Dim hkey, ipad(63), opad(63), odata(79), idata(), x, innerhashout</instruction>
		<instruction>    ReDim idata(64 + Len(text) - 1)</instruction>
		<instruction>    </instruction>
		<instruction>    If Len(key)&gt;64 Then</instruction>
		<instruction>        hkey = calcMD5(key)</instruction>
		<instruction>    Else</instruction>
		<instruction>        hkey = key</instruction>
		<instruction>    End If</instruction>
		<instruction>    </instruction>
		<instruction>    </instruction>
		<instruction>    For x=0 To 63</instruction>
		<instruction>        idata(x) = &amp;h36</instruction>
		<instruction>        odata(x) = &amp;h5C</instruction>
		<instruction>        ipad(x) = &amp;h36</instruction>
		<instruction>        opad(x) = &amp;h5C</instruction>
		<instruction>    Next</instruction>
		<instruction>    </instruction>
		<instruction>    For x=0 To Len(hkey)-1</instruction>
		<instruction>        ipad(x) = ipad(x) Xor Asc(CStr(Mid(hkey,x+1,1)))</instruction>
		<instruction>        opad(x) = opad(x) Xor Asc(CStr(Mid(hkey,x+1,1)))</instruction>
		<instruction>        idata(x) = ipad(x) And &amp;hFF</instruction>
		<instruction>        odata(x) = opad(x) And &amp;hFF</instruction>
		<instruction>    Next</instruction>
		<instruction>    </instruction>
		<instruction>    For x=0 To Len(text)-1</instruction>
		<instruction>        idata(64+x) = Asc(CStr(Mid(text,x+1,1))) And &amp;hFF</instruction>
		<instruction>    Next      </instruction>
		<instruction>    </instruction>
		<instruction>    innerhashout = binl2byt(b_calcMD5(idata))</instruction>
		<instruction>    </instruction>
		<instruction>    For x=0 To 15</instruction>
		<instruction>        odata(64+x) = innerhashout(x)</instruction>
		<instruction>    Next</instruction>
		<instruction>    </instruction>
		<instruction>    HMAC = binl2hex(b_calcMD5(odata))</instruction>
		<instruction>    </instruction>
		<instruction>End Function</instruction>
		<instruction>&apos;</instruction>
		<instruction>&apos; The main MD5 function</instruction>
		<instruction>&apos;</instruction>
		<instruction>Function MD5(sMessage)</instruction>
		<instruction>    Dim x, r</instruction>
		<instruction>    </instruction>
		<instruction>    x = ConvertToWordArray(sMessage)</instruction>
		<instruction>    r = coreMD5(x)</instruction>
		<instruction>    </instruction>
		<instruction>    MD5 = LCase(r(0) + r(1) + r(2) + r(3))</instruction>
		<instruction>End Function</instruction>
		<instruction />
		<instruction>&apos;</instruction>
		<instruction>&apos; main auxilliary functions</instruction>
		<instruction>&apos;</instruction>
		<instruction>Function calcMD5(str)</instruction>
		<instruction>    calcMD5 = binl2hex(coreMD5(str2binl(str)))</instruction>
		<instruction>End Function</instruction>
		<instruction />
		<instruction>Function b_calcMD5(barray) </instruction>
		<instruction>    b_calcMD5 = coreMD5(bytarray2binl(barray))</instruction>
		<instruction>End Function</instruction>
		<instruction />
		<instruction>Function coreMD5(x)</instruction>
		<instruction>    Dim k, AA, BB, CC, DD, a, b, c, d</instruction>
		<instruction>    </instruction>
		<instruction>    Const S11 = 7</instruction>
		<instruction>    Const S12 = 12</instruction>
		<instruction>    Const S13 = 17</instruction>
		<instruction>    Const S14 = 22</instruction>
		<instruction>    Const S21 = 5</instruction>
		<instruction>    Const S22 = 9</instruction>
		<instruction>    Const S23 = 14</instruction>
		<instruction>    Const S24 = 20</instruction>
		<instruction>    Const S31 = 4</instruction>
		<instruction>    Const S32 = 11</instruction>
		<instruction>    Const S33 = 16</instruction>
		<instruction>    Const S34 = 23</instruction>
		<instruction>    Const S41 = 6</instruction>
		<instruction>    Const S42 = 10</instruction>
		<instruction>    Const S43 = 15</instruction>
		<instruction>    Const S44 = 21</instruction>
		<instruction>    </instruction>
		<instruction>    a = &amp;H67452301</instruction>
		<instruction>    b = &amp;HEFCDAB89</instruction>
		<instruction>    c = &amp;H98BADCFE</instruction>
		<instruction>    d = &amp;H10325476</instruction>
		<instruction>    </instruction>
		<instruction>    For k = 0 To UBound(x)-1 Step 16</instruction>
		<instruction>        AA = a</instruction>
		<instruction>        BB = b</instruction>
		<instruction>        CC = c</instruction>
		<instruction>        DD = d</instruction>
		<instruction>        </instruction>
		<instruction>        MD5_FF a, b, c, d, x(k + 0), S11, &amp;HD76AA478</instruction>
		<instruction>        MD5_FF d, a, b, c, x(k + 1), S12, &amp;HE8C7B756</instruction>
		<instruction>        MD5_FF c, d, a, b, x(k + 2), S13, &amp;H242070DB</instruction>
		<instruction>        MD5_FF b, c, d, a, x(k + 3), S14, &amp;HC1BDCEEE</instruction>
		<instruction>        MD5_FF a, b, c, d, x(k + 4), S11, &amp;HF57C0FAF</instruction>
		<instruction>        MD5_FF d, a, b, c, x(k + 5), S12, &amp;H4787C62A</instruction>
		<instruction>        MD5_FF c, d, a, b, x(k + 6), S13, &amp;HA8304613</instruction>
		<instruction>        MD5_FF b, c, d, a, x(k + 7), S14, &amp;HFD469501</instruction>
		<instruction>        MD5_FF a, b, c, d, x(k + 8), S11, &amp;H698098D8</instruction>
		<instruction>        MD5_FF d, a, b, c, x(k + 9), S12, &amp;H8B44F7AF</instruction>
		<instruction>        MD5_FF c, d, a, b, x(k + 10), S13, &amp;HFFFF5BB1</instruction>
		<instruction>        MD5_FF b, c, d, a, x(k + 11), S14, &amp;H895CD7BE</instruction>
		<instruction>        MD5_FF a, b, c, d, x(k + 12), S11, &amp;H6B901122</instruction>
		<instruction>        MD5_FF d, a, b, c, x(k + 13), S12, &amp;HFD987193</instruction>
		<instruction>        MD5_FF c, d, a, b, x(k + 14), S13, &amp;HA679438E</instruction>
		<instruction>        MD5_FF b, c, d, a, x(k + 15), S14, &amp;H49B40821</instruction>
		<instruction>        </instruction>
		<instruction>        MD5_GG a, b, c, d, x(k + 1), S21, &amp;HF61E2562</instruction>
		<instruction>        MD5_GG d, a, b, c, x(k + 6), S22, &amp;HC040B340</instruction>
		<instruction>        MD5_GG c, d, a, b, x(k + 11), S23, &amp;H265E5A51</instruction>
		<instruction>        MD5_GG b, c, d, a, x(k + 0), S24, &amp;HE9B6C7AA</instruction>
		<instruction>        MD5_GG a, b, c, d, x(k + 5), S21, &amp;HD62F105D</instruction>
		<instruction>        MD5_GG d, a, b, c, x(k + 10), S22, &amp;H2441453</instruction>
		<instruction>        MD5_GG c, d, a, b, x(k + 15), S23, &amp;HD8A1E681</instruction>
		<instruction>        MD5_GG b, c, d, a, x(k + 4), S24, &amp;HE7D3FBC8</instruction>
		<instruction>        MD5_GG a, b, c, d, x(k + 9), S21, &amp;H21E1CDE6</instruction>
		<instruction>        MD5_GG d, a, b, c, x(k + 14), S22, &amp;HC33707D6</instruction>
		<instruction>        MD5_GG c, d, a, b, x(k + 3), S23, &amp;HF4D50D87</instruction>
		<instruction>        MD5_GG b, c, d, a, x(k + 8), S24, &amp;H455A14ED</instruction>
		<instruction>        MD5_GG a, b, c, d, x(k + 13), S21, &amp;HA9E3E905</instruction>
		<instruction>        MD5_GG d, a, b, c, x(k + 2), S22, &amp;HFCEFA3F8</instruction>
		<instruction>        MD5_GG c, d, a, b, x(k + 7), S23, &amp;H676F02D9</instruction>
		<instruction>        MD5_GG b, c, d, a, x(k + 12), S24, &amp;H8D2A4C8A</instruction>
		<instruction>        </instruction>
		<instruction>        MD5_HH a, b, c, d, x(k + 5), S31, &amp;HFFFA3942</instruction>
		<instruction>        MD5_HH d, a, b, c, x(k + 8), S32, &amp;H8771F681</instruction>
		<instruction>        MD5_HH c, d, a, b, x(k + 11), S33, &amp;H6D9D6122</instruction>
		<instruction>        MD5_HH b, c, d, a, x(k + 14), S34, &amp;HFDE5380C</instruction>
		<instruction>        MD5_HH a, b, c, d, x(k + 1), S31, &amp;HA4BEEA44</instruction>
		<instruction>        MD5_HH d, a, b, c, x(k + 4), S32, &amp;H4BDECFA9</instruction>
		<instruction>        MD5_HH c, d, a, b, x(k + 7), S33, &amp;HF6BB4B60</instruction>
		<instruction>        MD5_HH b, c, d, a, x(k + 10), S34, &amp;HBEBFBC70</instruction>
		<instruction>        MD5_HH a, b, c, d, x(k + 13), S31, &amp;H289B7EC6</instruction>
		<instruction>        MD5_HH d, a, b, c, x(k + 0), S32, &amp;HEAA127FA</instruction>
		<instruction>        MD5_HH c, d, a, b, x(k + 3), S33, &amp;HD4EF3085</instruction>
		<instruction>        MD5_HH b, c, d, a, x(k + 6), S34, &amp;H4881D05</instruction>
		<instruction>        MD5_HH a, b, c, d, x(k + 9), S31, &amp;HD9D4D039</instruction>
		<instruction>        MD5_HH d, a, b, c, x(k + 12), S32, &amp;HE6DB99E5</instruction>
		<instruction>        MD5_HH c, d, a, b, x(k + 15), S33, &amp;H1FA27CF8</instruction>
		<instruction>        MD5_HH b, c, d, a, x(k + 2), S34, &amp;HC4AC5665</instruction>
		<instruction>        </instruction>
		<instruction>        MD5_II a, b, c, d, x(k + 0), S41, &amp;HF4292244</instruction>
		<instruction>        MD5_II d, a, b, c, x(k + 7), S42, &amp;H432AFF97</instruction>
		<instruction>        MD5_II c, d, a, b, x(k + 14), S43, &amp;HAB9423A7</instruction>
		<instruction>        MD5_II b, c, d, a, x(k + 5), S44, &amp;HFC93A039</instruction>
		<instruction>        MD5_II a, b, c, d, x(k + 12), S41, &amp;H655B59C3</instruction>
		<instruction>        MD5_II d, a, b, c, x(k + 3), S42, &amp;H8F0CCC92</instruction>
		<instruction>        MD5_II c, d, a, b, x(k + 10), S43, &amp;HFFEFF47D</instruction>
		<instruction>        MD5_II b, c, d, a, x(k + 1), S44, &amp;H85845DD1</instruction>
		<instruction>        MD5_II a, b, c, d, x(k + 8), S41, &amp;H6FA87E4F</instruction>
		<instruction>        MD5_II d, a, b, c, x(k + 15), S42, &amp;HFE2CE6E0</instruction>
		<instruction>        MD5_II c, d, a, b, x(k + 6), S43, &amp;HA3014314</instruction>
		<instruction>        MD5_II b, c, d, a, x(k + 13), S44, &amp;H4E0811A1</instruction>
		<instruction>        MD5_II a, b, c, d, x(k + 4), S41, &amp;HF7537E82</instruction>
		<instruction>        MD5_II d, a, b, c, x(k + 11), S42, &amp;HBD3AF235</instruction>
		<instruction>        MD5_II c, d, a, b, x(k + 2), S43, &amp;H2AD7D2BB</instruction>
		<instruction>        MD5_II b, c, d, a, x(k + 9), S44, &amp;HEB86D391</instruction>
		<instruction>        </instruction>
		<instruction>        a = AddUnsigned(a, AA)</instruction>
		<instruction>        b = AddUnsigned(b, BB)</instruction>
		<instruction>        c = AddUnsigned(c, CC)</instruction>
		<instruction>        d = AddUnsigned(d, DD)</instruction>
		<instruction>    Next</instruction>
		<instruction>    </instruction>
		<instruction>    coreMD5 = Array(a,b,c,d)</instruction>
		<instruction>End Function</instruction>
		<instruction />
		<instruction>&apos;</instruction>
		<instruction>&apos; screwball MD5 functions</instruction>
		<instruction>&apos;</instruction>
		<instruction>Sub MD5_FF(a, b, c, d, x, s, ac)</instruction>
		<instruction>    a = AddUnsigned(a, AddUnsigned(AddUnsigned(MD5_F(b, c, d), x), ac))</instruction>
		<instruction>    a = RotateLeft(a, s)</instruction>
		<instruction>    a = AddUnsigned(a, b)</instruction>
		<instruction>End Sub</instruction>
		<instruction />
		<instruction>Sub MD5_GG(a, b, c, d, x, s, ac)</instruction>
		<instruction>    a = AddUnsigned(a, AddUnsigned(AddUnsigned(MD5_G(b, c, d), x), ac))</instruction>
		<instruction>    a = RotateLeft(a, s)</instruction>
		<instruction>    a = AddUnsigned(a, b)</instruction>
		<instruction>End Sub</instruction>
		<instruction />
		<instruction>Sub MD5_HH(a, b, c, d, x, s, ac)</instruction>
		<instruction>    a = AddUnsigned(a, AddUnsigned(AddUnsigned(MD5_H(b, c, d), x), ac))</instruction>
		<instruction>    a = RotateLeft(a, s)</instruction>
		<instruction>    a = AddUnsigned(a, b)</instruction>
		<instruction>End Sub</instruction>
		<instruction />
		<instruction>Sub MD5_II(a, b, c, d, x, s, ac)</instruction>
		<instruction>    a = AddUnsigned(a, AddUnsigned(AddUnsigned(MD5_I(b, c, d), x), ac))</instruction>
		<instruction>    a = RotateLeft(a, s)</instruction>
		<instruction>    a = AddUnsigned(a, b)</instruction>
		<instruction>End Sub</instruction>
		<instruction />
		<instruction>Function MD5_F(x, y, z)</instruction>
		<instruction>    MD5_F = (x And y) Or ((Not x) And z)</instruction>
		<instruction>End Function</instruction>
		<instruction />
		<instruction>Function MD5_G(x, y, z)</instruction>
		<instruction>    MD5_G = (x And z) Or (y And (Not z))</instruction>
		<instruction>End Function</instruction>
		<instruction />
		<instruction>Function MD5_H(x, y, z)</instruction>
		<instruction>    MD5_H = (x Xor y Xor z)</instruction>
		<instruction>End Function</instruction>
		<instruction />
		<instruction>Function MD5_I(x, y, z)</instruction>
		<instruction>    MD5_I = (y Xor (x Or (Not z)))</instruction>
		<instruction>End Function</instruction>
		<instruction />
		<instruction>&apos;</instruction>
		<instruction>&apos; utility functions</instruction>
		<instruction>&apos;</instruction>
		<instruction>Function LShift(lValue, iShiftBits)</instruction>
		<instruction>    If iShiftBits = 0 Then</instruction>
		<instruction>        LShift = lValue</instruction>
		<instruction>        Exit Function</instruction>
		<instruction>    ElseIf iShiftBits = 31 Then</instruction>
		<instruction>        If lValue And 1 Then</instruction>
		<instruction>            LShift = &amp;H80000000</instruction>
		<instruction>        Else</instruction>
		<instruction>            LShift = 0</instruction>
		<instruction>        End If</instruction>
		<instruction>        Exit Function</instruction>
		<instruction>    ElseIf iShiftBits &lt; 0 Or iShiftBits &gt; 31 Then</instruction>
		<instruction>        Err.Raise 6</instruction>
		<instruction>    End If</instruction>
		<instruction>    </instruction>
		<instruction>    If (lValue And m_l2Power(31 - iShiftBits)) Then</instruction>
		<instruction>        LShift = ((lValue And m_lOnBits(31 - (iShiftBits + 1))) * m_l2Power(iShiftBits)) Or &amp;H80000000</instruction>
		<instruction>    Else</instruction>
		<instruction>        LShift = ((lValue And m_lOnBits(31 - iShiftBits)) * m_l2Power(iShiftBits))</instruction>
		<instruction>    End If</instruction>
		<instruction>End Function</instruction>
		<instruction />
		<instruction>Function RShift(lValue, iShiftBits)</instruction>
		<instruction>    If iShiftBits = 0 Then</instruction>
		<instruction>        RShift = lValue</instruction>
		<instruction>        Exit Function</instruction>
		<instruction>    ElseIf iShiftBits = 31 Then</instruction>
		<instruction>        If lValue And &amp;H80000000 Then</instruction>
		<instruction>            RShift = 1</instruction>
		<instruction>        Else</instruction>
		<instruction>            RShift = 0</instruction>
		<instruction>        End If</instruction>
		<instruction>        Exit Function</instruction>
		<instruction>    ElseIf iShiftBits &lt; 0 Or iShiftBits &gt; 31 Then</instruction>
		<instruction>        Err.Raise 6</instruction>
		<instruction>    End If</instruction>
		<instruction>    </instruction>
		<instruction>    RShift = (lValue And &amp;H7FFFFFFE) \ m_l2Power(iShiftBits)</instruction>
		<instruction>    </instruction>
		<instruction>    If (lValue And &amp;H80000000) Then</instruction>
		<instruction>        RShift = (RShift Or (&amp;H40000000 \ m_l2Power(iShiftBits - 1)))</instruction>
		<instruction>    End If</instruction>
		<instruction>End Function</instruction>
		<instruction />
		<instruction>Function RotateLeft(lValue, iShiftBits)</instruction>
		<instruction>    RotateLeft = LShift(lValue, iShiftBits) Or RShift(lValue, (32 - iShiftBits))</instruction>
		<instruction>End Function</instruction>
		<instruction />
		<instruction>Function AddUnsigned(lX, lY)</instruction>
		<instruction>    Dim lX4, lY4, lX8, lY8, lResult</instruction>
		<instruction>    </instruction>
		<instruction>    lX8 = lX And &amp;H80000000</instruction>
		<instruction>    lY8 = lY And &amp;H80000000</instruction>
		<instruction>    lX4 = lX And &amp;H40000000</instruction>
		<instruction>    lY4 = lY And &amp;H40000000</instruction>
		<instruction>    </instruction>
		<instruction>    lResult = (lX And &amp;H3FFFFFFF) + (lY And &amp;H3FFFFFFF)</instruction>
		<instruction>    </instruction>
		<instruction>    If lX4 And lY4 Then</instruction>
		<instruction>        lResult = lResult Xor &amp;H80000000 Xor lX8 Xor lY8</instruction>
		<instruction>    ElseIf lX4 Or lY4 Then</instruction>
		<instruction>        If lResult And &amp;H40000000 Then</instruction>
		<instruction>            lResult = lResult Xor &amp;HC0000000 Xor lX8 Xor lY8</instruction>
		<instruction>        Else</instruction>
		<instruction>            lResult = lResult Xor &amp;H40000000 Xor lX8 Xor lY8</instruction>
		<instruction>        End If</instruction>
		<instruction>    Else</instruction>
		<instruction>        lResult = lResult Xor lX8 Xor lY8</instruction>
		<instruction>    End If</instruction>
		<instruction>    </instruction>
		<instruction>    AddUnsigned = lResult</instruction>
		<instruction>End Function</instruction>
		<instruction />
		<instruction>Function ConvertToWordArray(sMessage)</instruction>
		<instruction>    Dim lMessageLength, lNumberOfWords, lWordArray()</instruction>
		<instruction>    Dim lBytePosition, lByteCount, lWordCount</instruction>
		<instruction>    </instruction>
		<instruction>    Const MODULUS_BITS = 512</instruction>
		<instruction>    Const CONGRUENT_BITS = 448</instruction>
		<instruction>    </instruction>
		<instruction>    lMessageLength = Len(sMessage)</instruction>
		<instruction>    </instruction>
		<instruction>    lNumberOfWords = (((lMessageLength + ((MODULUS_BITS - CONGRUENT_BITS) \ BITS_TO_A_BYTE)) \ (MODULUS_BITS \ BITS_TO_A_BYTE)) + 1) * (MODULUS_BITS \ BITS_TO_A_WORD)</instruction>
		<instruction>    ReDim lWordArray(lNumberOfWords - 1)</instruction>
		<instruction>    </instruction>
		<instruction>    lBytePosition = 0</instruction>
		<instruction>    lByteCount = 0</instruction>
		<instruction>    Do Until lByteCount &gt;= lMessageLength</instruction>
		<instruction>        lWordCount = lByteCount \ BYTES_TO_A_WORD</instruction>
		<instruction>        lBytePosition = (lByteCount Mod BYTES_TO_A_WORD) * BITS_TO_A_BYTE</instruction>
		<instruction>        lWordArray(lWordCount) = lWordArray(lWordCount) Or LShift(Asc(Mid(sMessage, lByteCount + 1, 1)), lBytePosition)</instruction>
		<instruction>        lByteCount = lByteCount + 1</instruction>
		<instruction>    Loop</instruction>
		<instruction>    </instruction>
		<instruction>    lWordCount = lByteCount \ BYTES_TO_A_WORD</instruction>
		<instruction>    lBytePosition = (lByteCount Mod BYTES_TO_A_WORD) * BITS_TO_A_BYTE</instruction>
		<instruction>    </instruction>
		<instruction>    lWordArray(lWordCount) = lWordArray(lWordCount) Or LShift(&amp;H80, lBytePosition)</instruction>
		<instruction>    </instruction>
		<instruction>    lWordArray(lNumberOfWords - 2) = LShift(lMessageLength, 3)</instruction>
		<instruction>    lWordArray(lNumberOfWords - 1) = RShift(lMessageLength, 29)</instruction>
		<instruction>    </instruction>
		<instruction>    ConvertToWordArray = lWordArray</instruction>
		<instruction>End Function</instruction>
		<instruction />
		<instruction>Function WordToHex(lValue)</instruction>
		<instruction>    Dim lByte, lCount</instruction>
		<instruction>    </instruction>
		<instruction>    For lCount = 0 To 3</instruction>
		<instruction>        lByte = RShift(lValue, lCount * BITS_TO_A_BYTE) And m_lOnBits(BITS_TO_A_BYTE - 1)</instruction>
		<instruction>        WordToHex = WordToHex &amp; Right(&quot;0&quot; &amp; Hex(lByte), 2)</instruction>
		<instruction>    Next</instruction>
		<instruction>End Function</instruction>
		<instruction />
		<instruction>Function str2binl(str)</instruction>
		<instruction>    Dim nblk, x, arIdx</instruction>
		<instruction>    nblk = ( RShift((Len(str) + 8), 6) ) + 1 &apos; number of 16-word blocks</instruction>
		<instruction>    Dim blks()</instruction>
		<instruction>    ReDim blks(nblk*16 - 1)</instruction>
		<instruction>    </instruction>
		<instruction>    For x=0 To nblk * 16 - 1</instruction>
		<instruction>        blks(x) = 0</instruction>
		<instruction>    Next</instruction>
		<instruction>    </instruction>
		<instruction>    For x = 0 To Len(str)-1</instruction>
		<instruction>        arIdx = RShift(x,2)</instruction>
		<instruction>        blks(arIdx) = blks(arIdx) Or LShift(Asc(CStr(Mid(str,x+1,1))) And &amp;hFF, ((x Mod 4) * 8))</instruction>
		<instruction>    Next</instruction>
		<instruction>    </instruction>
		<instruction>    blks(RShift(x,2)) = blks(RShift(x,2)) Or LShift(&amp;h80, ((x Mod 4) * 8))</instruction>
		<instruction>    blks(nblk*16-2) = Len(str) * 8</instruction>
		<instruction>    str2binl = blks</instruction>
		<instruction>End Function</instruction>
		<instruction />
		<instruction>Function bytarray2binl(barray)</instruction>
		<instruction>    Dim nblk, x, arIdx</instruction>
		<instruction>    nblk = RShift((UBound(barray) + 8), 6) + 1 &apos; number of 16-word blocks</instruction>
		<instruction>    </instruction>
		<instruction>    Dim blks()</instruction>
		<instruction>    ReDim blks(nblk*16 - 1)</instruction>
		<instruction>    </instruction>
		<instruction>    For x = 0 To nblk*16 - 1</instruction>
		<instruction>        blks(x) = 0</instruction>
		<instruction>    Next</instruction>
		<instruction>    </instruction>
		<instruction>    For x = 0 To UBound(barray)</instruction>
		<instruction>        arIdx = RShift(x,2)</instruction>
		<instruction>        blks(arIdx) = blks(arIdx) Or LShift( barray(x) And &amp;hFF, (x Mod 4) * 8)</instruction>
		<instruction>    Next</instruction>
		<instruction>    </instruction>
		<instruction>    blks(RShift(x,2)) = blks(RShift(x,2)) Or LShift(&amp;h80, ((x Mod 4) * 8))</instruction>
		<instruction>    blks(nblk*16-2) = (UBound(barray)+1) * 8</instruction>
		<instruction>    bytarray2binl = blks</instruction>
		<instruction>End Function</instruction>
		<instruction />
		<instruction>Function binl2byt(binarray)</instruction>
		<instruction>    Dim bytarray(), str, x</instruction>
		<instruction>    ReDim bytarray(((UBound(binarray)+1) * 4) - 1)</instruction>
		<instruction>    str = &quot;&quot;</instruction>
		<instruction>    For x = 0 To ((UBound(binarray)+1) * 4) -1</instruction>
		<instruction>        bytarray(x) = _</instruction>
		<instruction>        LShift(( RShift( binarray(RShift(x,2)), ((x Mod 4)*8+4) ) And &amp;hF ), 4) _</instruction>
		<instruction>        Or _</instruction>
		<instruction>        (RShift(binarray(RShift(x,2)),((x Mod 4)*8))) And &amp;hF</instruction>
		<instruction>    Next</instruction>
		<instruction>    binl2byt = bytarray</instruction>
		<instruction>End Function</instruction>
		<instruction />
		<instruction>Function binl2hex(binarray)</instruction>
		<instruction>    Dim hex_tab, x, str</instruction>
		<instruction>    hex_tab = &quot;0123456789abcdef&quot;</instruction>
		<instruction>    str = &quot;&quot;</instruction>
		<instruction>    </instruction>
		<instruction>    For x=0 To ((UBound(binarray)+1) * 4) - 1</instruction>
		<instruction>        str = str + Mid(hex_tab,( RShift(binarray(RShift(x,2)), ((x Mod 4)*8+4)) And &amp;hF )+1, 1) + _</instruction>
		<instruction>        Mid(hex_tab,( RShift(binarray(RShift(x,2)), ((x Mod 4)*8)) And &amp;hF )+1, 1)</instruction>
		<instruction>    Next</instruction>
		<instruction>    </instruction>
		<instruction>    binl2hex = str</instruction>
		<instruction>End Function</instruction>
		<instruction />
		<instruction>Function calFlowerPassword(txtPassword, txtKey)</instruction>
		<instruction>    Dim md5one, md5two, md5three, code32, code16</instruction>
		<instruction>    Dim i, str</instruction>
		<instruction>    str = &quot;sunlovesnow1990090127xykab&quot;</instruction>
		<instruction>    </instruction>
		<instruction>    md5one = LCase(Hmac(txtKey, txtPassword))</instruction>
		<instruction>    md5two = LCase(Hmac(&quot;snow&quot;, md5one))</instruction>
		<instruction>    md5three = LCase(Hmac(&quot;kise&quot;, LCase(md5one)))</instruction>
		<instruction>    </instruction>
		<instruction>    &apos;code32 = &quot;&quot;</instruction>
		<instruction>    </instruction>
		<instruction>    For i = 1 To Len(md5two)</instruction>
		<instruction>        If Not IsNumeric(Mid(md5two, i, 1)) Then</instruction>
		<instruction>            If InStr(1, str, Mid(md5three, i, 1), vbBinaryCompare) &gt; 0 Then</instruction>
		<instruction>                code32 = code32 + UCase(Mid(md5two, i, 1))</instruction>
		<instruction>            Else</instruction>
		<instruction>                code32 = code32 + Mid(md5two, i, 1)</instruction>
		<instruction>            End If</instruction>
		<instruction>        Else</instruction>
		<instruction>            code32 = code32 + Mid(md5two, i, 1)</instruction>
		<instruction>        End If</instruction>
		<instruction>    Next</instruction>
		<instruction>        </instruction>
		<instruction>    If Not IsNumeric(Left(code32, 1)) Then</instruction>
		<instruction>        code16 = Left(code32, 16)</instruction>
		<instruction>    Else</instruction>
		<instruction>        code16 = &quot;K&quot; + Mid(code32, 2, 15)</instruction>
		<instruction>    End If</instruction>
		<instruction>    </instruction>
		<instruction>    calFlowerPassword = code16 &amp; &quot; &quot; &amp; code32</instruction>
		<instruction>End Function</instruction>
		<instruction />
		<instruction>Function OnClick(ByRef clickData)</instruction>
		<instruction>	Dim Dlg, Msg, Password, Key, NewPassword</instruction>
		<instruction>	Set Dlg = DOpus.Dlg</instruction>
		<instruction>    Dlg.window = clickData.func.sourcetab</instruction>
		<instruction>    Dlg.template = &quot;dlgFlowerPassword&quot;</instruction>
		<instruction>    Dlg.detach = True</instruction>
		<instruction>    Dlg.Show </instruction>
		<instruction>    Do</instruction>
		<instruction>    	Set Msg = Dlg.GetMsg()</instruction>
		<instruction>		Select Case Msg.Event </instruction>
		<instruction>	    	Case &quot;editchange&quot;</instruction>
		<instruction>				If Msg.control = &quot;edtPassword&quot; Or Msg.Control = &quot;edtKey&quot; then</instruction>
		<instruction>					Password = Dlg.Control(&quot;edtPassword&quot;).Value</instruction>
		<instruction>					Key = Dlg.Control(&quot;edtKey&quot;).Value</instruction>
		<instruction>					If Len(Password) &lt;&gt; 0 and Len(Key) &lt;&gt; 0 Then</instruction>
		<instruction>						NewPassword = calFlowerPassword(Password, Key)</instruction>
		<instruction>						Dlg.Control(&quot;edtCode16&quot;).Value =  Left(NewPassword, 16)</instruction>
		<instruction>						Dlg.Control(&quot;edtCode32&quot;).Value = Right(NewPassword, 32)</instruction>
		<instruction>					End If</instruction>
		<instruction>				End If</instruction>
		<instruction>			Case &quot;click&quot;</instruction>
		<instruction>				Select Case Msg.control</instruction>
		<instruction>					Case &quot;btnCopy16&quot;</instruction>
		<instruction>						If CBool(Len(Dlg.Control(&quot;edtCode16&quot;).Value)) Then DOpus.SetClip Dlg.Control(&quot;edtCode16&quot;).Value</instruction>
		<instruction>					Case &quot;btnCopy32&quot;</instruction>
		<instruction>						If CBool(Len(Dlg.Control(&quot;edtCode32&quot;).Value)) Then DOpus.SetClip Dlg.Control(&quot;edtCode32&quot;).Value</instruction>
		<instruction>				End Select</instruction>
		<instruction>		End Select</instruction>
		<instruction>    Loop While Msg</instruction>
		<instruction>End Function</instruction>
		<instruction />
		<instruction>==SCRIPT RESOURCES</instruction>
		<instruction>&lt;resources&gt;</instruction>
		<instruction>	&lt;resource name=&quot;dlgFlowerPassword&quot; type=&quot;dialog&quot;&gt;</instruction>
		<instruction>		&lt;dialog fontface=&quot;Microsoft YaHei UI&quot; fontsize=&quot;9&quot; height=&quot;186&quot; lang=&quot;chs&quot; standard_buttons=&quot;ok&quot; title=&quot;花密 - 不一样的密码管理工具&quot; width=&quot;200&quot;&gt;</instruction>
		<instruction>			&lt;languages&gt;</instruction>
		<instruction>				&lt;language height=&quot;186&quot; lang=&quot;english&quot; ok=&quot;OK&quot; title=&quot;FlowerPassword - Not the same password management tools&quot; width=&quot;200&quot; /&gt;</instruction>
		<instruction>			&lt;/languages&gt;</instruction>
		<instruction>			&lt;control height=&quot;54&quot; name=&quot;grpInput&quot; title=&quot;输入&quot; type=&quot;group&quot; width=&quot;190&quot; x=&quot;5&quot; y=&quot;10&quot;&gt;</instruction>
		<instruction>				&lt;languages&gt;</instruction>
		<instruction>					&lt;language height=&quot;54&quot; lang=&quot;english&quot; title=&quot;Input&quot; width=&quot;190&quot; x=&quot;5&quot; y=&quot;10&quot; /&gt;</instruction>
		<instruction>				&lt;/languages&gt;</instruction>
		<instruction>			&lt;/control&gt;</instruction>
		<instruction>			&lt;control halign=&quot;left&quot; height=&quot;8&quot; name=&quot;stsPassword&quot; title=&quot;记忆密码&quot; type=&quot;static&quot; width=&quot;36&quot; x=&quot;13&quot; y=&quot;25&quot;&gt;</instruction>
		<instruction>				&lt;languages&gt;</instruction>
		<instruction>					&lt;language height=&quot;8&quot; lang=&quot;english&quot; title=&quot;Password&quot; width=&quot;33&quot; x=&quot;12&quot; y=&quot;25&quot; /&gt;</instruction>
		<instruction>				&lt;/languages&gt;</instruction>
		<instruction>			&lt;/control&gt;</instruction>
		<instruction>			&lt;control halign=&quot;left&quot; height=&quot;12&quot; name=&quot;edtPassword&quot; password=&quot;yes&quot; type=&quot;edit&quot; width=&quot;135&quot; x=&quot;53&quot; y=&quot;22&quot; /&gt;</instruction>
		<instruction>			&lt;control halign=&quot;left&quot; height=&quot;8&quot; name=&quot;staKey&quot; title=&quot;区分代号&quot; type=&quot;static&quot; width=&quot;36&quot; x=&quot;13&quot; y=&quot;42&quot;&gt;</instruction>
		<instruction>				&lt;languages&gt;</instruction>
		<instruction>					&lt;language height=&quot;8&quot; lang=&quot;english&quot; title=&quot;Key&quot; width=&quot;33&quot; x=&quot;12&quot; y=&quot;42&quot; /&gt;</instruction>
		<instruction>				&lt;/languages&gt;</instruction>
		<instruction>			&lt;/control&gt;</instruction>
		<instruction>			&lt;control height=&quot;54&quot; name=&quot;grpOutput&quot; title=&quot;获取&quot; type=&quot;group&quot; width=&quot;190&quot; x=&quot;5&quot; y=&quot;69&quot;&gt;</instruction>
		<instruction>				&lt;languages&gt;</instruction>
		<instruction>					&lt;language height=&quot;54&quot; lang=&quot;english&quot; title=&quot;Output&quot; width=&quot;190&quot; x=&quot;5&quot; y=&quot;69&quot; /&gt;</instruction>
		<instruction>				&lt;/languages&gt;</instruction>
		<instruction>			&lt;/control&gt;</instruction>
		<instruction>			&lt;control halign=&quot;left&quot; height=&quot;12&quot; name=&quot;edtKey&quot; type=&quot;edit&quot; width=&quot;135&quot; x=&quot;53&quot; y=&quot;40&quot; /&gt;</instruction>
		<instruction>			&lt;control halign=&quot;left&quot; height=&quot;12&quot; name=&quot;edtCode16&quot; readonly=&quot;yes&quot; type=&quot;edit&quot; width=&quot;148&quot; x=&quot;13&quot; y=&quot;82&quot; /&gt;</instruction>
		<instruction>			&lt;control halign=&quot;left&quot; height=&quot;12&quot; name=&quot;edtCode32&quot; readonly=&quot;yes&quot; type=&quot;edit&quot; width=&quot;148&quot; x=&quot;13&quot; y=&quot;102&quot; /&gt;</instruction>
		<instruction>			&lt;control halign=&quot;left&quot; height=&quot;39&quot; name=&quot;static3&quot; title=&quot;记忆密码\n　　选择一个与个人信息无关的密码，防止社会工程学破解。\n区分代号\n　　用于区别不同用途密码的简短代号，如淘宝账号可用“taobao”或“tb”等。&quot; type=&quot;static&quot; width=&quot;186&quot; x=&quot;7&quot; y=&quot;126&quot;&gt;</instruction>
		<instruction>				&lt;languages&gt;</instruction>
		<instruction>					&lt;language height=&quot;39&quot; lang=&quot;english&quot; title=&quot;Password\n  Choose a password that is not related to personal information.\nKey: \n  Used to distinguish between different codes of use.&quot; width=&quot;186&quot; x=&quot;7&quot; y=&quot;126&quot; /&gt;</instruction>
		<instruction>				&lt;/languages&gt;</instruction>
		<instruction>			&lt;/control&gt;</instruction>
		<instruction>			&lt;control height=&quot;12&quot; name=&quot;btnCopy16&quot; title=&quot;复制&quot; type=&quot;button&quot; width=&quot;25&quot; x=&quot;165&quot; y=&quot;82&quot;&gt;</instruction>
		<instruction>				&lt;languages&gt;</instruction>
		<instruction>					&lt;language height=&quot;12&quot; lang=&quot;english&quot; title=&quot;Copy&quot; width=&quot;25&quot; x=&quot;165&quot; y=&quot;82&quot; /&gt;</instruction>
		<instruction>				&lt;/languages&gt;</instruction>
		<instruction>			&lt;/control&gt;</instruction>
		<instruction>			&lt;control height=&quot;12&quot; name=&quot;btnCopy32&quot; title=&quot;复制&quot; type=&quot;button&quot; width=&quot;25&quot; x=&quot;164&quot; y=&quot;102&quot;&gt;</instruction>
		<instruction>				&lt;languages&gt;</instruction>
		<instruction>					&lt;language height=&quot;12&quot; lang=&quot;english&quot; title=&quot;Copy&quot; width=&quot;25&quot; x=&quot;164&quot; y=&quot;102&quot; /&gt;</instruction>
		<instruction>				&lt;/languages&gt;</instruction>
		<instruction>			&lt;/control&gt;</instruction>
		<instruction>		&lt;/dialog&gt;</instruction>
		<instruction>	&lt;/resource&gt;</instruction>
		<instruction>&lt;/resources&gt;</instruction>
	</function>
</button>
